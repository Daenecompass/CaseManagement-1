package se.plushogskolan.casemanagement.repository.sql;

import static org.junit.Assert.assertEquals;

import java.util.List;
import java.util.NoSuchElementException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import se.plushogskolan.casemanagement.exception.RepositoryException;
import se.plushogskolan.casemanagement.model.Team;
import se.plushogskolan.casemanagement.repository.mysql.SqlTeamRepository;

public final class TestSqlTeamRepository {
    private final String newTeamName = "Updated Test Testing Team";
    private final boolean newTeamActiveSatus = true;
    private Team testTeam;
    private List<Team> teams;
    private SqlTeamRepository sqlTeamRepository;

    @Before
    public void setUp() throws Exception {
        testTeam = Team.builder().setActive(false).build("The Testing Tests Team");
        sqlTeamRepository = new SqlTeamRepository();
    }

    @After
    public void clean() throws RepositoryException {
        sqlTeamRepository.deleteFromDatabaseTeamWithNameAndActiveStatus(testTeam.getName(), testTeam.isActive());
        sqlTeamRepository.deleteFromDatabaseTeamWithNameAndActiveStatus(newTeamName, newTeamActiveSatus);
        teams = null;
    }

    @Test
    public void saveTeam() throws RepositoryException {
        sqlTeamRepository.saveTeam(testTeam);

        teams = sqlTeamRepository.getAllTeams();

        assertEquals(true, isTestTeamInList(teams));
    }

    private boolean isTestTeamInList(List<Team> teams) {
        for (Team team : teams)
            if (testTeam.getName().equals(team.getName()))
                return true;

        return false;
    }

    @Test
    public void updateTeam() throws RepositoryException {
        // Team id is generated by database why all this saving and getting is required
        sqlTeamRepository.saveTeam(testTeam);
        teams = sqlTeamRepository.getAllTeams();

        Team teamToUpdate = getTestFromListWithName(teams, testTeam.getName());
        
        Team teamWithNewValues = Team.builder().setActive(newTeamActiveSatus).setId(teamToUpdate.getId())
                .build(newTeamName);
        
        sqlTeamRepository.updateTeam(teamWithNewValues);

        teams = sqlTeamRepository.getAllTeams();
        Team updatedTeam = getTestFromListWithName(teams, teamWithNewValues.getName());

        assertEquals(teamToUpdate.getId(), updatedTeam.getId());
        assertEquals(teamWithNewValues.getName(), updatedTeam.getName());
    }
    
    private Team getTestFromListWithName(List<Team> teams, String teamName) {
        for (Team team : teams)
            if (teamName.equals(team.getName()))
                return team;
        
        throw new NoSuchElementException("Could not find Team with name " + teamName);
    }

    @Test
    public void inactivateTeam() throws RepositoryException {
    }

    @Test
    public void getAllTeams() throws RepositoryException {
    }

    @Test
    public void addUserToTeam() throws RepositoryException {
    }
}
