package se.plushogskolan.casemanagement.repository.sql;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.NoSuchElementException;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import se.plushogskolan.casemanagement.exception.RepositoryException;
import se.plushogskolan.casemanagement.model.Team;
import se.plushogskolan.casemanagement.repository.mysql.SqlTeamRepository;

/** Run tests together with our official test database. **/
// Team id is generated by database why all this saving and getting is required
public final class TestSqlTeamRepository {
    private final String newTeamName = "Updated Test Testing Team";
    private final boolean newTeamActiveSatus = true;
    private Team testTeam;
    private List<Team> teams;
    private SqlTeamRepository sqlTeamRepository;

    @Before
    public void setUp() throws Exception {
        testTeam = Team.builder().setActive(false).build("The Testing Tests Team");
        sqlTeamRepository = new SqlTeamRepository();
        sqlTeamRepository.saveTeam(testTeam);
    }

    @After
    public void clean() throws RepositoryException {
        sqlTeamRepository.deleteFromDatabaseTeamWithNameAndActiveStatus(testTeam.getName(), true);
        sqlTeamRepository.deleteFromDatabaseTeamWithNameAndActiveStatus(testTeam.getName(), false);
        sqlTeamRepository.deleteFromDatabaseTeamWithNameAndActiveStatus(newTeamName, true);
        sqlTeamRepository.deleteFromDatabaseTeamWithNameAndActiveStatus(newTeamName, false);
        teams = null;
    }

    @Test
    public void saveTeam() throws RepositoryException {
        teams = sqlTeamRepository.getAllTeams();

        assertTrue(listContainTeamWithName(teams, testTeam.getName()));
    }

    private boolean listContainTeamWithName(List<Team> teams, String teamName) {
        for (Team team : teams)
            if (teamName.equals(team.getName()))
                return true;

        return false;
    }

    @Test(expected = RepositoryException.class)
    public void savingTwoTeamsWithSameNameShouldThrowException() throws RepositoryException {
        sqlTeamRepository.saveTeam(testTeam);
    }

    @Test
    public void updateTeam() throws RepositoryException {
        teams = sqlTeamRepository.getAllTeams();

        Team teamToUpdate = getFromListTheTestWithName(teams, testTeam.getName());
        
        Team teamWithNewValues = Team.builder().setActive(newTeamActiveSatus).setId(teamToUpdate.getId())
                .build(newTeamName);
        
        sqlTeamRepository.updateTeam(teamWithNewValues);

        teams = sqlTeamRepository.getAllTeams();
        Team updatedTeam = getFromListTheTestWithName(teams, teamWithNewValues.getName());

        assertEquals(teamToUpdate.getId(), updatedTeam.getId());
        assertEquals(teamWithNewValues.getName(), updatedTeam.getName());
    }
    
    private Team getFromListTheTestWithName(List<Team> teams, String teamName) {
        for (Team team : teams)
            if (teamName.equals(team.getName()))
                return team;
        
        throw new NoSuchElementException("Could not find Team with name " + teamName);
    }

    @Test
    public void activateTeam() throws RepositoryException {
        int testTeamId = getTestTeamId();
        
        assertFalse(sqlTeamRepository.isTeamWithIdActive(testTeamId));
        
        sqlTeamRepository.activateTeam(testTeamId);

        assertTrue(sqlTeamRepository.isTeamWithIdActive(testTeamId));
    }
    
    private int getTestTeamId() throws RepositoryException {
        teams = sqlTeamRepository.getAllTeams();
        
        return getFromListTheTestWithName(teams, testTeam.getName()).getId();
    }

    @Test
    public void inactivateTeam() throws RepositoryException {
        int testTeamId = getTestTeamId();
        
        sqlTeamRepository.activateTeam(testTeamId);
        
        assertEquals(true, sqlTeamRepository.isTeamWithIdActive(testTeamId));
        
        sqlTeamRepository.inactivateTeam(testTeamId);

        assertEquals(false, sqlTeamRepository.isTeamWithIdActive(testTeamId));
    }
    
    @Test
    public void getAllTeams() throws RepositoryException {
        teams = sqlTeamRepository.getAllTeams();
        
        assertEquals(4, teams.size());
        
        assertTrue(listContainTeamWithName(teams, testTeam.getName()));
        
        // Default Teams in test database
        assertTrue(listContainTeamWithName(teams, "Team Rocket"));
        assertTrue(listContainTeamWithName(teams, "Team LMAULUL"));
        assertTrue(listContainTeamWithName(teams, "Team Instinct"));
    }

    @Test
    public void addUserToTeam() throws RepositoryException {
    }

    @Test
    public void deleteTeamFromDatabase() throws RepositoryException {
    }
}
